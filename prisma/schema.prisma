// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// Prisma schema

model User {
  id                   String     @id @default(uuid())
  username             String?
  email                String?      @unique
  password             String?
  role                 String[]
  refresh_token        String?
  company_id          String?
  notification_sending Boolean?
  send_email_alerts   Boolean?
  deadline_notify     Boolean?
  remind_approvals    Boolean?
  business_name       String?  
   salary_calculation String?    @default("daily rate")
  currency String?               @default("USD")
  payslip_format String?          @default("PDF")
  current_role        String?
  google_id           String?
  apple_id            String?
  notifications       Notification[]
  image_url           String?
  settings            UserSettings[]  @relation("userSettings")
  companies           Company[]    @relation("UserCompanies")
  logs                Log[]
}

model Company {
  id                    String        @id @default(uuid())
  company_profile       String?
  company_name          String
  business_type         String
  standard_work_hours   Int
  weekly_work_limit     Int
  holidays String[]
  overtime_rate         Decimal
  users                 User[]        @relation("UserCompanies")
  employees             Employee[]
  daily_total_planned_cost Decimal?
  daily_total_actual_cost Decimal?
}

model Attendance {
  id              String    @id @default(uuid())
  employee_id     String
  status          String?   // (present|absent|late)
  reason          String?   // (sick|vacation|unpaid leave)
  overtime_hours  Decimal?
  employee        Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date            DateTime @default(now())   
}
model Session {
  id        String   @id @default(uuid())
  sid       String   @unique
  data      String   
  expiresAt DateTime 

  @@index([sid])
}

model Log {
  id        String  @id @default(uuid())
  user_id   String
  action    String
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
}

model Employee {
  id                    String    @id @default(uuid())
  username              String?
  trade_position_id     String
  daily_rate            Decimal?   @default(0)
  created_date         DateTime  @default(now())
  attendance           Attendance[]
  contract_finish_date DateTime?
  days_projection      Int?
  budget_baseline      Decimal?   @default(0)
  company_id           String
  company              Company   @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trade_position       TradePosition @relation(fields: [trade_position_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model TradePosition {
  id                String    @id @default(uuid())
  trade_name       String?
  employees        Employee[]
  projectId        String?
  project           Project?  @relation(fields: [projectId],references: [id], onDelete: Cascade, onUpdate: Cascade)
  daily_planned_cost Decimal?   @db.Decimal(10, 2)
  location_name String?
  work_days        Int?
  planned_salary   Decimal?
}

model  Location {
  id String @id @default(uuid())
  location_name String
}
model Project { 
  id String @id @default(uuid())
  project_name String @default("Project")
  location_name String 
  currency String
  trade_positions TradePosition[]
  start_date DateTime 
  end_date DateTime
}
model Notification {
  id        String  @id @default(uuid())
  message   String
  user_id   String
  read      Boolean
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime @default(now())
}

model UserSettings{
  id String @id @default(uuid())
  // userId String @unique
  role   String?  
  user User[] @relation("userSettings")
  full_access         Boolean?
  approve_attendance  Boolean?
  manage_payroll      Boolean?
  view_reports        Boolean?
  approve_leaves      Boolean?
  view_payslip        Boolean?
  mark_attendance     Boolean?
  manage_employees    Boolean?
  generate_reports    Boolean?
}