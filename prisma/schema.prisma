// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// Prisma schema

enum RoleRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id                   String     @id @default(uuid())
  username             String?
  email                String?      @unique
  password             String?
  role                 String[]
  refresh_token        String?
  company_id          String?
  notification_sending Boolean?
  send_email_alerts   Boolean?
  deadline_notify     Boolean?
  remind_approvals    Boolean?
  business_name       String?  
  salary_calculation  String?    @default("daily rate")
  currency           String?    @default("RWF")
  payslip_format     String?    @default("PDF")
  current_role       String?
  google_id          String?
  apple_id           String?
  notifications      Notification[]
  image_url          String?
  settings           UserSettings[]  @relation("userSettings")
  companies          Company[]    @relation("UserCompanies")
  logs               Log[]
  role_request_approval RoleRequestStatus? @default(PENDING)
}

model Company {
  id                    String        @id @default(uuid())
  company_profile       String?
  company_name          String
  business_type         String
  standard_work_hours   Int
  base_currency         String?         @default("RWF")
  weekly_work_limit     Int
  holidays              String[]
  overtime_rate         Decimal
  users                 User[]        @relation("UserCompanies")
  employees             Employee[]
  daily_total_planned_cost Decimal?
  daily_total_actual_cost Decimal?
  userSettings          UserSettings[] @relation("CompanyUserSettings")
}

model Attendance {
  id              String    @id @default(uuid())
  employee_id     String
  company_id       String?
  status          String?   // (present|absent|late)
  reason          String?   // (sick|vacation|unpaid leave)
  overtime_hours  Decimal?
  employee        Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date            DateTime @default(now())   
}
model Session {
  id        String   @id @default(uuid())
  sid       String   @unique
  data      String   
  expiresAt DateTime 

  @@index([sid])
}

model Log {
  id        String  @id @default(uuid())
  user_id   String
  action    String
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
}

model Employee {
  id                    String    @id @default(uuid())
  username              String?
  trade_position_id     String
  daily_rate            Decimal?   @default(0)
    monthly_rate            Decimal?   @default(0)
  created_date         DateTime  @default(now())
  attendance           Attendance[]
  deductions           Deduction[]
  contract_finish_date DateTime?
  contract_start_date DateTime?
  days_projection      Int?
  budget_baseline      Decimal?   @default(0)
  company_id           String
  projectId            String?
  company              Company   @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trade_position       TradePosition @relation(fields: [trade_position_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project              Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model TradePosition {
  id                String    @id @default(uuid())
  trade_name       String?
  employees        Employee[]
  company_id       String?
  projectId        String?
  project           Project?  @relation(fields: [projectId],references: [id], onDelete: Cascade, onUpdate: Cascade)
  daily_planned_cost Decimal?   @db.Decimal(15, 2)  @default(0)
    monthly_planned_cost Decimal?   @db.Decimal(15, 2)  @default(0)
  location_name String?
  work_days        Int?
  planned_salary   Decimal?
  late_deduction_rate Decimal? @default(0.1)
}

model  Location {
  id String @id @default(uuid())
  location_name String
  company_id String?
}
model Project { 
  id String @id @default(uuid())
  project_name String @default("Project")
  location_name String 
  budget    Decimal?  @db.Decimal(15, 2)  @default(0)
  company_id String?
  trade_positions TradePosition[]
  employees Employee[]
  expenses Expense[]
  boq_items BOQItem[]
  project_expenses ProjectExpense[]
  project_revenues ProjectRevenue[]
  start_date DateTime 
  end_date DateTime
}
model Notification {
  id        String  @id @default(uuid())
  message   String
  company_id String?
  user_id   String
  read      Boolean
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime @default(now())
}

model UserSettings {
  id                String   @id @default(uuid())
  role              String?
  company_id        String?
  company           Company? @relation("CompanyUserSettings", fields: [company_id], references: [id], onDelete: Cascade)
  user              User[]   @relation("userSettings")
  full_access       Boolean?
  approve_attendance Boolean? //done
  manage_payroll    Boolean?
  view_reports      Boolean?
  approve_leaves    Boolean?
  view_payslip      Boolean? //done
  mark_attendance   Boolean? //done
  manage_employees  Boolean? //done
  generate_reports  Boolean? //done
}

model Expense {
  id          String    @id @default(uuid())
  description String
  category    String
  quantity    Decimal   @db.Decimal(15, 2)
  unit        String
  unit_price  Decimal   @db.Decimal(15, 2)
  amount      Decimal   @db.Decimal(15, 2)
  project_id  String
  company_id  String
  date        DateTime  @default(now())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  
  project     Project   @relation(fields: [project_id], references: [id], onDelete: Cascade)
}

model Deduction {
  id          String    @id @default(uuid())
  name        String
  amount      Decimal   @db.Decimal(15, 2)
  type        String    // insurance, advance_payment, loan_repayment, tax, uniform_cost, damage_loss, other
  reason      String?
  date        DateTime?
  employee_id String
  company_id  String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  
  employee    Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade)
}

model BOQItem {
  id            String    @id @default(uuid())
  item_no       String
  description   String
  unit          String
  quantity      Decimal   @db.Decimal(15, 2)
  rate          Decimal   @db.Decimal(15, 2)
  amount        Decimal   @db.Decimal(15, 2)
  completed_qty Decimal?  @db.Decimal(15, 2) @default(0)
  project_id    String
  company_id    String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  project       Project         @relation(fields: [project_id], references: [id], onDelete: Cascade)
  revenues      ProjectRevenue[]
}

model ProjectExpense {
  id          String    @id @default(uuid())
  date        DateTime  @default(now())
  category    String    // Materials, Labor, Equipment, Transportation, Permits, Other
  description String
  quantity    Decimal   @db.Decimal(15, 2)
  unit        String    // M, M², M³, KG, TON, NO, LS, HR, DAY, LOAD
  unit_price  Decimal   @db.Decimal(15, 2)
  amount      Decimal   @db.Decimal(15, 2)
  project_id  String
  company_id  String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  
  project     Project   @relation(fields: [project_id], references: [id], onDelete: Cascade)
}

model ProjectRevenue {
  id            String    @id @default(uuid())
  from_date     DateTime
  to_date       DateTime
  quantity_done Decimal   @db.Decimal(15, 2)
  rate          Decimal   @db.Decimal(15, 2)
  amount        Decimal   @db.Decimal(15, 2)
  project_id    String
  boq_item_id   String
  company_id    String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  project       Project   @relation(fields: [project_id], references: [id], onDelete: Cascade)
  boq_item      BOQItem   @relation(fields: [boq_item_id], references: [id], onDelete: Cascade)
}